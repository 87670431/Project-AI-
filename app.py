import streamlit as st
import os
from utils import generate_motivational_quote
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set page config
st.set_page_config(
    page_title="Daily Motivation Generator",
    page_icon="‚ú®",
    layout="centered"
)

# Custom CSS for better styling - simplified for better compatibility
st.markdown("""
<style>
    /* Main container styling */
    .main-container {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    /* Header styling */
    .header {
        background: linear-gradient(135deg, #42b883, #347474);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 25px;
    }
    
    .header h1 {
        font-size: 2.2rem;
        margin-bottom: 10px;
    }
    
    .header p {
        font-size: 1.1rem;
        opacity: 0.9;
    }
    
    /* Quote card styling */
    .quote-card {
        background-color: #f8f9fa;
        border-left: 5px solid #42b883;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    
    /* Quote text styling */
    .quote-text {
        font-size: 1.3rem;
        line-height: 1.6;
        color: #333;
        font-style: italic;
        margin: 10px 0;
    }
    
    /* Info box styling */
    .info-box {
        background-color: #e8f4f8;
        border: 1px solid #bce8f1;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    
    /* Form container styling */
    .form-container {
        background-color: #f5f7fa;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #e1e4e8;
    }
    
    /* Mood selector container */
    .mood-container {
        background-color: #f0f8ff;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #d1e3ff;
    }
    
    /* Footer styling */
    .footer {
        text-align: center;
        margin-top: 30px;
        padding: 15px;
        color: #777;
        border-top: 1px solid #eee;
    }
    
    /* Action buttons container */
    .action-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
    
    /* Instructions box */
    .instructions-box {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        margin-top: 20px;
    }
</style>
""", unsafe_allow_html=True)

# Main app layout
st.markdown('<div class="header"><h1>‚ú® Daily Motivation Generator</h1><p>Get your daily dose of motivation generated by AI to start your day positively!</p></div>', unsafe_allow_html=True)

# Ask user for API key if not already in session state
if "api_key" not in st.session_state:
    # Check if API key is available in environment
    env_api_key = os.getenv("GEMINI_API_KEY")
    if env_api_key:
        st.session_state.api_key = env_api_key
    else:
        # Create a form for API key input with better styling
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        st.markdown('### üîë Enter your API Key')
        st.markdown('This app uses Google Gemini AI to generate personalized motivational quotes.')
        
        with st.form(key="api_key_form"):
            api_key_input = st.text_input(
                "Enter your Google Gemini API Key", 
                type="password",
                help="Get your API key from https://makersuite.google.com/app/apikey"
            )
            
            col1, col2 = st.columns([1, 2])
            with col1:
                submit_button = st.form_submit_button(label="Save API Key")
            
            if submit_button and api_key_input:
                st.session_state.api_key = api_key_input
                st.success("API Key saved successfully!")
                st.rerun()
            elif submit_button and not api_key_input:
                st.error("Please enter a valid API key.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('<div class="info-box"><p>You can get a free API key from <a href="https://makersuite.google.com/app/apikey" target="_blank">Google AI Studio</a></p></div>', unsafe_allow_html=True)
        st.stop()

# Define mood options with emojis
moods = {
    "General (No specific mood)": "‚ú®",
    "Happy": "üòä", 
    "Sad": "üòî", 
    "Stressed": "üò´", 
    "Anxious": "üò∞", 
    "Tired": "üò¥", 
    "Excited": "ü§©", 
    "Overwhelmed": "ü•¥",
    "Unmotivated": "üòê",
    "Grateful": "üôè"
}

# Format mood options with emojis
mood_options = [f"{emoji} {mood}" for mood, emoji in moods.items()]

# Interactive mood selection with better styling
st.markdown('<div class="mood-container">', unsafe_allow_html=True)
st.markdown("### How are you feeling today?")
st.write("Select your current mood to get personalized motivation:")

# Use columns for better layout
col1, col2 = st.columns([3, 1])

with col1:
    selected_mood_with_emoji = st.selectbox("Select your mood", mood_options, index=0, label_visibility="visible")
    # Extract the mood without emoji
    selected_mood = selected_mood_with_emoji.split(" ", 1)[1] if len(selected_mood_with_emoji.split(" ", 1)) > 1 else "General (No specific mood)"

with col2:
    st.write("")
    st.write("")
    generate_button = st.button("Generate Quote", use_container_width=True)

st.markdown('</div>', unsafe_allow_html=True)

# Initialize session state for quotes
if "quote" not in st.session_state:
    st.session_state.quote = None
    st.session_state.current_mood = None

# Generate and display quote
if generate_button:
    with st.spinner("Crafting your personalized motivation..."):
        try:
            quote = generate_motivational_quote(selected_mood, st.session_state.api_key)
            st.session_state.quote = quote
            st.session_state.current_mood = selected_mood
        except Exception as e:
            st.error(f"Error generating quote: {str(e)}")
            st.write("Please try again later or check your API key.")
            
            # Add option to reset API key if there's an error
            if st.button("Reset API Key"):
                del st.session_state.api_key
                st.rerun()

# Display the quote if available
if st.session_state.quote:
    # Get the mood emoji
    mood_emoji = moods.get(st.session_state.current_mood, "‚ú®")
    
    # Display the quote with better styling
    st.markdown('<div class="quote-card">', unsafe_allow_html=True)
    st.markdown(f'<h3>{mood_emoji} Your Motivation</h3>', unsafe_allow_html=True)
    st.markdown(f'<div style="font-size: 24px; color: #42b883;">‚ùù</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="quote-text">{st.session_state.quote}</div>', unsafe_allow_html=True)
    st.markdown(f'<div style="text-align: right; font-size: 24px; color: #42b883;">‚ùû</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Add interactive action buttons with better layout
    st.markdown('<div class="action-buttons">', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üì§ Share Quote", use_container_width=True):
            st.success("Quote copied to clipboard! (Note: In this demo, sharing is simulated)")
            
    with col2:
        if st.button("üíñ Save Favorite", use_container_width=True):
            st.success("Quote saved to favorites! (Note: In this demo, saving is simulated)")
            
    with col3:
        if st.button("üîÑ New Quote", use_container_width=True):
            st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)

# App instructions with better styling
with st.expander("üìñ How to use this app"):
    st.markdown('<div class="instructions-box">', unsafe_allow_html=True)
    st.markdown("""
    #### Getting Started
    1. Enter your Google Gemini API key (required only once)
    2. Select your current mood from the dropdown menu
    3. Click 'Generate Quote' to get personalized motivation
    4. Use the action buttons to save, share, or generate new quotes
    
    #### About
    This app uses Google's Gemini AI (gemini-1.5-pro model) to create personalized motivational quotes 
    tailored to your mood. The quotes are generated in real-time and are unique each time.
    """)
    st.markdown('</div>', unsafe_allow_html=True)

# Footer with improved styling
st.markdown('<div class="footer">', unsafe_allow_html=True)
st.markdown('Made with ‚ù§Ô∏è using Streamlit and Google Gemini AI')
st.markdown('</div>', unsafe_allow_html=True)
